{"version":3,"sources":["components/App/App.hooks.ts","components/App/App.helpers.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["ESendTypes","videoElement","a","navigator","mediaDevices","getUserMedia","audio","video","stream","srcObject","turnCameraOff","undefined","getTracks","isMediaStream","forEach","track","stop","App","useState","isCameraOn","setIsCameraOn","isReady","setIsReady","isConnected","readyUsersNumber","setReadyUsersNumber","playerRef","useRef","onMessage","socketRef","useEffect","current","WebSocket","onmessage","data","stringifiedData","JSON","stringify","send","useSocket","useCallback","event","parsedData","parse","type","USERS_NUMBER","payload","handleSwitchClick","turnCameraOn","then","catch","console","log","handleReadyClick","NOT_READY","READY","handleNextClick","className","muted","autoPlay","playsInline","ref","onClick","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kLAEYA,E,kHCFL,WAA4BC,GAA5B,eAAAC,EAAA,sEACgBC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAMC,OAAO,IAD1E,OACCC,EADD,OAGLP,EAAaQ,UAAYD,EAHpB,4C,sBAMA,SAASE,EAAcT,GAAiC,IACrDQ,EAAcR,EAAdQ,WAMH,SAAuBA,GAC5B,YAAgDE,IAAxCF,EAA0BG,UANYC,CAAcJ,GAAaA,EAAUG,YAAc,IAE/EE,SAAQ,SAAAC,GAAK,OAAIA,EAAMC,W,SDR/BhB,K,cAAAA,E,sBAAAA,E,4BAAAA,E,aAAAA,M,WEmGGiB,MAhGf,WAAgB,IAAD,EACuBC,oBAAS,GADhC,mBACNC,EADM,KACMC,EADN,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGSJ,oBAAS,GAAxBK,EAHM,sBAImCL,mBAAwB,MAJ3D,mBAINM,EAJM,KAIYC,EAJZ,KAKPC,EAAYC,iBAAyB,MAL9B,EFWR,SAAmBC,GACxB,IAAMC,EAAYF,iBAAyB,MAa3C,OAXAG,qBAAU,WACRD,EAAUE,QAAU,IAAIC,UAAU,uBAClCH,EAAUE,QAAQE,UAAYL,IAC7B,CAACA,IAQG,CANP,SAAiBM,GAAqB,IAAD,EAC7BC,EAAkBC,KAAKC,UAAUH,GAEvC,UAAAL,EAAUE,eAAV,SAAmBO,KAAKH,KEFXI,CAbGC,uBAAY,SAACC,GAC7B,IAAMC,EAAwBN,KAAKO,MAAMF,EAAMP,MAE/C,OAAQQ,EAAWE,MACjB,KAAK5C,EAAW6C,aACdpB,EAAoBiB,EAAWI,YAMlC,KAEIR,EApBM,oBAsBPS,EAAoBP,uBAAY,WAChCrB,GACFT,EAAcgB,EAAUK,SACxBX,GAAc,ID9Bb,SAAP,kCCgCM4B,CAAatB,EAAUK,SACpBkB,MAAK,kBAAM7B,GAAc,MACzB8B,MAAMC,QAAQC,OAElB,CAACjC,IAEEkC,EAAmBb,uBAAY,WAC/BnB,GACFiB,EAAK,CAAEM,KAAM5C,EAAWsD,YACxBhC,GAAW,KAEXgB,EAAK,CAAEM,KAAM5C,EAAWuD,QACxBjC,GAAW,MAEZ,CAACD,EAASiB,IAEPkB,EAAkBhB,uBAAY,WAClCW,QAAQC,IAAI,UACX,IAEH,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,qBAAf,qFACoBjC,GAGpB,2BAAOiC,UAAU,gBAAgBC,OAAK,EAACC,UAAQ,EAACC,aAAW,EAACC,IAAKnC,GAAjE,2LAIA,yBAAK+B,UAAU,iBACb,4BAAQA,UAAU,gBAAgBK,QAASf,GACxC5B,EAAa,8FAAqB,4FAM3C,yBAAKsC,UAAU,eACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,iBAAf,yCACWpC,EACLE,EACE,6CACA,mDACF,+CAGN,2BAAOkC,UAAU,gBAAgBE,UAAQ,EAACC,aAAW,GAArD,2LAIA,yBAAKH,UAAU,iBACb,4BAAQA,UAAU,eAAeK,QAAST,GACvChC,EAAU,yDAAc,wCAG3B,4BAAQoC,UAAU,cAAcK,QAASN,EAAiBO,UAAWxC,GAArE,+DC/EQyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBtE,WACrBA,UAAUuE,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL3B,QAAQ2B,MAAMA,EAAMC,a","file":"static/js/main.5547fc1c.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport enum ESendTypes {\n  READY = 'ready',\n  NOT_READY = 'not_ready',\n  USERS_NUMBER = 'users_number',\n  NEXT = 'next',\n}\n\nexport interface ISendData<T = any> {\n  type: ESendTypes;\n  payload?: T;\n}\n\ntype TOnMessage = (event: MessageEvent) => void;\n\nexport function useSocket(onMessage: TOnMessage) {\n  const socketRef = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    socketRef.current = new WebSocket(\"ws://localhost:8080\");\n    socketRef.current.onmessage = onMessage;\n  }, [onMessage]);\n\n  function send<T>(data: ISendData<T>) {\n    const stringifiedData = JSON.stringify(data);\n\n    socketRef.current?.send(stringifiedData);\n  }\n\n  return [send];\n}","export async function turnCameraOn(videoElement: HTMLVideoElement) {\n  const stream = await navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n  \n  videoElement.srcObject = stream;\n}\n\nexport function turnCameraOff(videoElement: HTMLVideoElement) {\n  const { srcObject } = videoElement;\n  const mediaStreamTracks: MediaStreamTrack[] = isMediaStream(srcObject) ? srcObject.getTracks() : [];\n      \n  mediaStreamTracks.forEach(track => track.stop());\n}\n\nexport function isMediaStream(srcObject: MediaStream | MediaSource | Blob | null): srcObject is MediaStream {\n  return (srcObject as MediaStream).getTracks !== undefined;\n}","import React, { useCallback, useRef, useState } from 'react';\nimport { turnCameraOff, turnCameraOn } from './App.helpers';\nimport { ESendTypes, ISendData, useSocket } from './App.hooks';\nimport './App.scss';\n\nfunction App() {\n  const [isCameraOn, setIsCameraOn] = useState(false);\n  const [isReady, setIsReady] = useState(false);\n  const [isConnected] = useState(false);\n  const [readyUsersNumber, setReadyUsersNumber] = useState<number | null>(null);\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const onMessage = useCallback((event: MessageEvent) => {\n    const parsedData: ISendData = JSON.parse(event.data);\n\n    switch (parsedData.type) {\n      case ESendTypes.USERS_NUMBER:\n        setReadyUsersNumber(parsedData.payload)\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n\n  const [send] = useSocket(onMessage);\n\n  const handleSwitchClick = useCallback(() => {\n    if (isCameraOn) {\n      turnCameraOff(playerRef.current!);\n      setIsCameraOn(false);\n    } else {\n      turnCameraOn(playerRef.current!)\n        .then(() => setIsCameraOn(true))\n        .catch(console.log)\n    }\n  }, [isCameraOn]);\n\n  const handleReadyClick = useCallback(() => {\n    if (isReady) {\n      send({ type: ESendTypes.NOT_READY });\n      setIsReady(false);\n    } else {\n      send({ type: ESendTypes.READY });\n      setIsReady(true);\n    }\n  }, [isReady, send]);\n\n  const handleNextClick = useCallback(() => {\n    console.log('next');\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__column\">\n        <div className=\"video\">\n          <div className=\"video__attendance\">\n            Сейчас на сайте: {readyUsersNumber}\n          </div>\n\n          <video className=\"video__player\" muted autoPlay playsInline ref={playerRef}>\n            Видео не поддерживается браузером\n          </video>\n\n          <div className=\"video__footer\">\n            <button className=\"video__switch\" onClick={handleSwitchClick}>\n              {isCameraOn ? 'Выключить камеру' : 'Включить камеру'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"app__column\">\n        <div className=\"video\">\n          <div className=\"video__status\">\n            Статус: {isReady\n              ? isConnected\n                ? 'общение'\n                : 'ожидание'\n              : 'не готов'}\n          </div>\n\n          <video className=\"video__player\" autoPlay playsInline>\n            Видео не поддерживается браузером\n          </video>\n\n          <div className=\"video__footer\">\n            <button className=\"video__ready\" onClick={handleReadyClick}>\n              {isReady ? 'Закончить' : 'Начать'}\n            </button>\n\n            <button className=\"video__next\" onClick={handleNextClick} disabled={!isConnected}>\n              Следующий\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'webrtc-adapter';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}